local token, precedence = require 'qamar.tokenizer.types', require 'qamar.parser.precedence'

return {
    infix = {
        [token.kw_or] = { precedence = precedence.lor, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.kw_and] = { precedence = precedence.land, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.lt] = { precedence = precedence.comparison, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.gt] = { precedence = precedence.comparison, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.leq] = { precedence = precedence.comparison, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.geq] = { precedence = precedence.comparison, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.neq] = { precedence = precedence.comparison, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.eq] = { precedence = precedence.comparison, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.bitor] = { precedence = precedence.bor, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.bitnot] = { precedence = precedence.bxor, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.bitand] = { precedence = precedence.band, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.lshift] = { precedence = precedence.shift, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.rshift] = { precedence = precedence.shift, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.concat] = { precedence = precedence.concat, right_associative = true, parse = require 'qamar.parser.parselets.infix' },
        [token.add] = { precedence = precedence.add, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.sub] = { precedence = precedence.add, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.mul] = { precedence = precedence.mul, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.div] = { precedence = precedence.mul, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.fdiv] = { precedence = precedence.mul, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.mod] = { precedence = precedence.mul, right_associative = false, parse = require 'qamar.parser.parselets.infix' },
        [token.exp] = { precedence = precedence.exp, right_associative = true, parse = require 'qamar.parser.parselets.infix' },
    },
    prefix = {
        [token.kw_not] = { precedence = precedence.unary, right_associative = false, parse = require 'qamar.parser.parselets.prefix' },
        [token.len] = { precedence = precedence.unary, right_associative = false, parse = require 'qamar.parser.parselets.prefix' },
        [token.sub] = { precedence = precedence.unary, right_associative = false, parse = require 'qamar.parser.parselets.prefix' },
        [token.bitnot] = { precedence = precedence.unary, right_associative = false, parse = require 'qamar.parser.parselets.prefix' },
        [token.lparen] = { precedence = precedence.atom, right_associative = false, parse = require 'qamar.parser.parselets.subexpression' },
        [token.name] = { precedence = precedence.atom, right_associative = false, parse = require 'qamar.parser.parselets.atom' },
        [token.number] = { precedence = precedence.atom, right_associative = false, parse = require 'qamar.parser.parselets.atom' },
    },
}
